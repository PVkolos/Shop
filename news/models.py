from django.db import models
# from shop.search import client

from users.models import Basket

from django import forms
# from django.contrib.postgres.fields import ArrayField


THEME_CHOICES = (
    #
    ("Новинки 2025", "Новинки 2025"),
    #
    ("Автохимия и автокосметика", "Автохимия и автокосметика"),
    #
    ("Новинки от Grass", "Новинки от Grass"),
    #
    ("Уцененные товары", "Уцененные товары"),
    # Пакеты
    ('Фасовочные пакеты', 'Фасовочные пакеты'),
    ("Пакеты-Майка", "Пакеты-Майка"),
    ("Мусорные пакеты", "Мусорные пакеты"),
    ("Бумажные пакеты", "Бумажные пакеты"),
    ("Пакеты с вырубленной ручкой", "Пакеты с вырубленной ручкой"),
    ("Пакеты с петлевой ручкой", "Пакеты с петлевой ручкой"),
    ("Пакеты Zip Lock и слайдеры", "Пакеты Zip Lock и слайдеры"),
    # Пластиковая одноразовая посуда
    ("Тарелки, креманки", "Тарелки, креманки"),
    ("Столовые приборы", "Столовые приборы"),
    ("Стаканы, чашки", "Стаканы, чашки"),
    ("Контейнеры пластиковые", "Контейнеры пластиковые"),
    # Бумажная одноразовая посуда
    ("Бумажные тарелки", "Бумажные тарелки"),
    ("Бумажные стаканы", "Бумажные стаканы"),
    ("Суши палочки, зубочистки, размешиватели", "Суши палочки, зубочистки, размешиватели"),
    ("Держатели, манжеты для стаканов", "Держатели, манжеты для стаканов"),
    # Пластиковая упаковка
    ("Ведра пищевые", "Ведра пищевые"),
    ("Бутылки ПЭТ" ,"Бутылки ПЭТ"),
    ("Упаковка для кондитерских изделий", "Упаковка для кондитерских изделий"),
    ("Упаковка для салатов", "Упаковка для салатов"),
    ("Тортницы", "Тортницы"),
    ("Яйцебоксы", "Яйцебоксы"),
    # Бумажная упаковка
    ("Упаковка для кондитерских изделий", "Упаковка для кондитерских изделий"),
    ("Подложки для торта", "Подложки для торта"),
    ("Оберточная бумага", "Оберточная бумага"),
    ("Коробки на вынос, картонные лотки", "Коробки на вынос, картонные лотки"),
    ("Пакеты Дой-пак", "Пакеты Дой-пак"),
    # Упаковка фаст-фуд, суши
    ("Пакеты, коробки для фри", "Пакеты, коробки для фри"),
    ("Суши и лапша (бумажные) WOK", "Суши и лапша (бумажные) WOK"),
    ("Сэндвичи, бургеры, ролл", "Сэндвичи, бургеры, ролл"),
    ("Соусники", "Соусники"),
    ("Коробки для пиццы", "Коробки для пиццы"),
    #
    ("Ланч-боксы и лотки", "Ланч-боксы и лотки"),
    # Пленка и скотч
    ("Пленка пищевая", "Пленка пищевая"),
    ("Скотч", "Скотч"),
    ("Пленка ПВХ", "Пленка ПВХ"),
    # Салфетки, полотенца, туалетная бумага
    ("Салфетки", "Салфетки"),
    ("Полотенца", "Полотенца"),
    ("Туалетная бумага", "Туалетная бумага"),
    ("Влажные салфетки", "Влажные салфетки"),
    # Товары хоз назначения
    ("Тряпки, салфетки для уборки", "Тряпки, салфетки для уборки"),
    ("Губки для посуды", "Губки для посуды"),
    ("Средства индивидуальной защиты", "Средства индивидуальной защиты"),
    ("Перчатки", "Перчатки"),
    ("Ватные диски, палочки, платочки бумажные", "Ватные диски, палочки, платочки бумажные"),
    ("Резинки для банкнот", "Резинки для банкнот"),
    ("Крышки ПЭТ, металл", "Крышки ПЭТ, металл"),
    ("Мешки ПП. сетка овощная", "Мешки ПП. сетка овощная"),
    ("Дождевики-плащи", "Дождевики-плащи"),
    ("Другие товары хоз назначения", "Другие товары хоз назначения"),
    # Товары для хранения и запекания
    ("Алюминиевые формы", "Алюминиевые формы"),
    ("Бумажные формы для запекания", "Бумажные формы для запекания"),
    ("Пергамент, бумага для выпечки", "Пергамент, бумага для выпечки"),
    ("Рукав и пакеты для запекания", "Рукав и пакеты для запекания"),
    ("Фольга алюминиевая", "Фольга алюминиевая"),
    ("Вакуумные пакеты", "Вакуумные пакеты"),
    ("Пакеты для гриля", "Пакеты для гриля"),
    ("Мешки кондитерские", "Мешки кондитерские"),
    ("Пакеты для льда и заморозки", "Пакеты для льда и заморозки"),
    ("Термопакеты", "Термопакеты"),
    # Подарочная упаковка и товары для праздника
    ("Подарочные коробки", "подарочные коробки"),
    ("Упаковочная бумага и пленка", "Упаковочная бумага и пленка"),
    ("Ленты", "Ленты"),
    ("Прочие товары (под. упаковка и для праздника)", "Прочие товары (под. упаковка и для праздника)"),
    # Канцелярские товары
    ("Ценники", "Ценники"),
    ("Накладные, товарные чеки", "Накладные, товарные чеки"),
    ("Термоленты и термоэтикетки", "Термоленты и термоэтикетки"),
    ("Чековая кассовая лента", "Чековая кассовая лента"),
    ("Ручки, маркеры", "Ручки, маркеры"),
    ("Прочие канцелярские товары", "Прочие канцелярские товары"),
    # Товары для сервировки
    ("Свечи", "Свечи"),
    ("Скатерти", "Скатерти"),
    ("Трубочки коктейль/шейк", "Трубочки коктейль/шейк"),
    ("Пики деревянные для канапэ", "Пики деревянные для канапэ"),
    ("Пики пластиковые для канапэ", "Пики пластиковые для канапэ"),
    # Новогодняя продукция
    ("Новогодние пакеты", "Новогодние пакеты"),
    ("Новогодние пакеты бумажные", "Новогодние пакеты бумажные"),
    ("Новогодние пакеты с пласт. ручкой", "Новогодние пакеты с пласт. ручкой"),
    ("Новогодние коробки", "Новогодние коробки"),
    ("Новогодние салфетки", "Новогодние салфетки"),
    ("Новогодние стаканы", "Новогодние стаканы"),
    ("Новогодние скатерти", "Новогодние скатерти"),
    # Бытовая химия
    ("Средства для мытья стекол", "Средства для мытья стекол"),
    ("Средства для мытья полов", "Средства для мытья полов"),
    ("Средства для кухни", "Средства для кухни"),
    ("Средства для сантехники", "Средства для сантехники"),
    ("Средства для мытья посуды", "Средства для мытья посуды"),
    ("Освежитель, полироль", "Освежитель, полироль"),
    ("Стиральные порошки", "Стиральные порошки"),
    ("Кондиционеры для стирки", "Кондиционеры для стирки"),
    ("Мыло", "Мыло"),
    ("Шампунь, гель, крем", "Шампунь, гель, крем"),
    ("Зубные пасты", "Зубные пасты"),
    ("Средства от насекомых", "Средства от насекомых"),
    ("Прочее для уборки и чистки", "Прочее для уборки и чистки"),
)


# class ModifiedArrayField(ArrayField):
#     def formfield(self, **kwargs):
#         defaults = {
#             "form_class": forms.MultipleChoiceField,
#             "choices": self.base_field.choices,
#             **kwargs
#         }
#         return super(ArrayField, self).formfield(**defaults)


class Products(models.Model):
    title = models.CharField('Название товара', max_length=200)
    price = models.FloatField('Цена товара')
    additional_info = models.TextField('Описание товара')
    image = models.ImageField('Картинка', upload_to='images')
    quantity = models.IntegerField('Штук в наличии')
    category = models.CharField('Категория', max_length=100)

    def __str__(self):
        return self.title

    # def save(self, *args, **kwargs):
    #     self.category = '-=-'.join(self.category)
    #     print(self.title, self.price, self.additional_info, self.image, self.quantity, self.category)
    #     super().save(*args, **kwargs)

        # Добавление товара в opensearch
        try:
            # client.create_product(
            #     id=self.id,
            #     index='search_products',
            #     title=self.title,
            #     additional_info=self.additional_info,
            #     category=self.category
            # )
            print("SUCCESS ADDED PRODUCT")
        except Exception as e:
            print("ERR Add.news.models.48", e)

    def delete(self, *args, **kwargs):
        # Удаление товара из opensearch
        try:
            # client.delete_product(
            #     index='search_products',
            #     id=self.id
            # )
            print("SUCCESS DELETED PRODUCT")
        except Exception as e:
            print("ERR Delete.news.models.59: ", e)

        Basket.objects.filter(id_product=self.id).delete()

        super().delete(*args, **kwargs)

    class Meta:
        verbose_name = 'Товар'
        verbose_name_plural = 'Товары'


# class Reviews(models.Model):
#     stars = models.IntegerField('Количество звезд')
#     name_user = models.CharField('Имя человека', max_length=100)
#     date = models.DateTimeField('Дата и время создания отзыва')
#     text = models.TextField('Текст отзыва', max_length=500)
#     photo = models.CharField('Название картинки', max_length=150)
#
#     def __str__(self):
#         return self.text
#
#     class Meta:
#         verbose_name = 'Отзыв'
#         verbose_name_plural = 'Отзывы'